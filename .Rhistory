summary(lm(bush.th ~ latino2 + age, anes))
28.1 + c(-1.96,1.96)*(8.683/sqrt(10))
28.1 + c(-1.96,1.96)*(8.543/sqrt(10))
44.5 + c(-1.96,1.96)*(8.683/sqrt(10))
sqrt(72.99)
8.10494^2
75.379/sqrt(10)
75.389/sqrt(10)
top <- 44.5 - 28.1
b1 <- 75.379/sqrt(10)
b2 <- 72.989/sqrt(10)
b <- b1+b2
rb <- sqrt(b)
top/rb
b2 <- 72.989/10
b1 <- 75.379/10
b <- b1+b2
rb <- sqrt(b)
top/rb
top <- 44.1 - 28.1
top/rb
top <- 44.9 - 28.1
top/rb
b1 <- 75.389/10
b1+b2
rb
demo()
demo(colors)
demo(plotmath)
demo(recursion)
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
V <- rnorm(1000, 13, 1)
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 13, 1)
X <- 3 + .2 * Z + .1 * V + rnorm(1000)
##### W DOES NOT cause X
W <- rnorm(1000, 5, 2)
#### W, V, and X cause Y
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
summary(lm(Y~X))
summary(lm(Y ~ X + W))
summary(lm(Y ~ X + V))
summary(lm(Y ~ X + V + W))
summary(lm(Y ~ V))
summary(lm( Y ~ Z))
summary(lm( Y ~ X + Z))
summary(lm(Y ~ X + V + W + Z))
summary(lm(Y ~ X + V + W)) # Best overall
summary(lm(Y ~ X + V + W + Z))
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #Best yet.
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 13, 1)
X <- 3 + .2 * Z + .1 * V
W <- rnorm(1000, 5, 2)
#### W, V, and X cause Y
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #Best yet.
summary(lm(Y ~ X + V + W)) # Best overall
summary(lm(Y ~ X + V + W + Z))
X <- 3 + .2 * Z + .1 * V + rnorm(1000)
summary(lm(Y ~ X + V + W + Z))
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 13, 1)
X <- 3 + .2 * Z + .1 * V + rnorm(1000)
##### W DOES NOT cause X
W <- rnorm(1000, 5, 2)
#### W, V, and X cause Y
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #Best yet.
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
summary(lm(Y ~ X + V + W + Z))
summary(lm(Y ~ X + Z))
summary(lm(Y ~ X + Z + V))
summary(lm(Y ~ X + Z + V + W))
summary(lm(Y ~ X + Z + V + W))
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X)) #biased up a bit
V <- rlnorm(1000, 13, 1)
X <- 3 + .2 * Z + .1 * V + rnorm(1000)
W <- rnorm(1000, 5, 2)
#### W, V, and X cause Y
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
summary(lm(Y ~ X + Z))
summary(lm(Y ~ X + Z + V))
summary(lm(Y ~ X + Z + V))
summary(lm(Y ~ X + Z + V + W))
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 3, 1)
X <- 3 + .2 * Z + .1 * V + rnorm(1000)
##### W DOES NOT cause X
W <- rnorm(1000, 5, 2)
#### W, V, and X cause Y
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
#### Lets see how accurate coefficients are
#### when we don't use the right set of controls
# Just X:
summary(lm(Y ~ X)) #biased up a bit
# X and W:
summary(lm(Y ~ X + W)) #still biased, but SE is lower
# X and V
summary(lm(Y ~ X + V)) #less bias
# X and V and W
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
##### Z and V cause X
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 3, 1)
X <- 3 + .2 * Z + .1 * V + rnorm(1000)
##### W DOES NOT cause X
W <- rnorm(1000, 5, 2)
#### W, V, and X cause Y
Y <- 5 + 4 * V + 3 * X + 2 * W + rnorm(1000)
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
summary(lm(Y ~ X + Z))
summary(lm(Y ~ X + Z + V))
summary(lm(Y ~ X + Z + V))
summary(lm(Y ~ X + Z + W))
summary(lm(Y ~ X + Z + V + W))
cov(X,Z)
lm(X ~ Z)
summary(lm(X ~ Z + V))
summary(lm(Y ~ X + V)) #less bias
# X and V and W (TRUE BETA_X = 3)
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
confint(lm(Y ~ X + V))
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
Y <- 5 + 1.5 * V + 3 * X + 2 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
Y <- 5 + 4 * V + 3 * X + 1.5 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
summary(lm(Y ~ X + Z))
summary(lm(Y ~ X + Z + V))
summary(lm(Y ~ X + Z + W))
summary(lm(Y ~ X + Z + V + W))
summary(lm(Y ~ W))
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
cor(Y,Z)
summary(lm(Y ~ X + Z))
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
Y <- 5 + 4 * V + 3 * X + 10 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
Y <- 5 + 4 * V + 3 * X + 5 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
Y <- 5 + 4 * V + 3 * X + 4 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 3, 1)
X <- 3 + .2 * Z + 5 * V + rnorm(1000)
W <- rnorm(1000, 5, 2)
Y <- 5 + 4 * V + 3 * X + 4 * W + rnorm(1000)
summary(lm(Y ~ X)) #biased up a bit
summary(lm(Y ~ X + W)) #still biased, but SE is lower
summary(lm(Y ~ X + V)) #less bias
summary(lm(Y ~ X + V + W)) # No less bias, just smaller SE
summary(lm(Y ~ X + Z))
summary(lm(Y ~ X + Z + V))
BiasMatrix <- matrix(NA, ncol = 2, nrow = 4)
colnames(BiasMatrix) <- c("Beta", "S.E.")
rownames(BiasMatrix) <- c("X", "X + W", "X + V", "X + V + W")
summary(lm(Y ~ X))[1,1:2]
summary(lm(Y ~ X))
summary(lm(Y ~ X))$coef
summary(lm(Y ~ X))$coef[2,1:2]
BiasMatrixX <- matrix(NA, ncol = 2, nrow = 1000)
BiasMatrixXW <- matrix(NA, ncol = 2, nrow = 1000)
BiasMatrixXV <- matrix(NA, ncol = 2, nrow = 1000)
BiasMatrixXWV <- matrix(NA, ncol = 2, nrow = 1000)
colnames(BiasMatrixX) <- c("Beta", "S.E.")
colnames(BiasMatrixXW) <- c("Beta", "S.E.")
colnames(BiasMatrixXV) <- c("Beta", "S.E.")
colnames(BiasMatrixXWV) <- c("Beta", "S.E.")
for( i in 1:1000){
Z <- rnorm(1000, 15, 2)
V <- rnorm(1000, 3, 1)
X <- 3 + .2 * Z + 5 * V + rnorm(1000)
W <- rnorm(1000, 5, 2)
Y <- 5 + 4 * V + 3 * X + 4 * W + rnorm(1000)
BiasMatrixX[i, ] <- summary(lm(Y ~ X))$coef[2,1:2] #biased up a bit
BiasMatrixXW[i, ] <- summary(lm(Y ~ X + W))$coef[2,1:2] #biased up a bit
BiasMatrixXV[i, ] <- summary(lm(Y ~ X + V))$coef[2,1:2] #biased up a bit
BiasMatrixXWV[i, ] <- summary(lm(Y ~ X + W + V))$coef[2,1:2] #biased up a bit
}
quantile(BiasMatrixX[,1], c(0.025,0.975))
quantile(BiasMatrixXW[,1], c(0.025,0.975))
quantile(BiasMatrixXV[,1], c(0.025,0.975))
quantile(BiasMatrixXWV[,1], c(0.025,0.975))
quantile(BiasMatrixX[,2], c(0.025,0.975))
quantile(BiasMatrixXW[,2], c(0.025,0.975))
quantile(BiasMatrixXV[,2], c(0.025,0.975))
quantile(BiasMatrixXWV[,2], c(0.025,0.975))
summary(lm(Y ~ X))$r.squared
summary(lm(Y ~ X + W))
summary(lm(Y ~ X + V))
plot( x = X, y = Y, col = "blue", pch = 14, ylab = "Y", xlab = "X", main = "X and Y")
jpeg(filename = "DalstonPlot", width = 480, height = 480)
plot( x = X, y = Y, col = "blue", pch = 14, ylab = "Y", xlab = "X", main = "X and Y")
dev.off()
jpeg(filename = "~/Desktop/DalstonPlot.jpeg", width = 480, height = 480)
plot( x = X, y = Y, col = "blue", pch = 14, ylab = "Y", xlab = "X", main = "X and Y")
dev.off()
abline(lm(Y~X), col = "red")
quantiel(BiasMatrixX[,1], c(0.025, 0.975))
quantile(BiasMatrixX[,1], c(0.025, 0.975))
plot( x = X, y = Y, col = "blue", pch = 14, ylab = "Y", xlab = "X", main = "X and Y")
install.packages(c("abind", "car", "coda", "codetools", "foreign", "lattice", "manipulate", "MASS", "mgcv", "nlme", "R2jags", "Rcpp", "sandwich", "survival", "zoo"))
install.packages("manipulate")
traffic <- read.dta("~/Dropbox/QPM/Sinclair_Materials/Data/Traffic.dta")
library(foreign)
traffic <- read.dta("~/Dropbox/QPM/Sinclair_Materials/Data/Traffic.dta")
vcov(lm(farsocc ~ usage + vmturban, traffic))
sqrt(diag(vcov(lm(farsocc ~ usage + vmturban, traffic))))
summary(lm(farsocc ~ usage + vmturban, traffic))
x <- rnorm(150, 15, 3)
y <- 5 + log(x) + rnorm(150)
plot(x,y,pch = "+", col = "blue")
plot(log(x),y,pch = "+", col = "blue")
y <- 5 + 4*log(x) + rnorm(150)
plot(x,y,pch = "+", col = "blue")
abline(lm(x ~ y))
plot(x,y,pch = "+", col = "blue", xlim = c(0,30), ylim = c(0,25))
plot(x,y,pch = "+", col = "blue", xlim = c(5,30), ylim = c(0,25))
plot(x,y,pch = "+", col = "blue", xlim = c(5,30), ylim = c(5,25))
abline(lm(x ~ y))
lines(x, predict(lm(y ~ log(x))))
plot(x,y,pch = "+", col = "blue")
abline(lm(x ~ y))
lines(x, predict(lm(y ~ log(x))))
x <- rnorm(150, 15, 10)
y <- 5 + 4*log(x) + rnorm(150)
log(-10)
x <- rnorm(150, 15, 5)
y <- 5 + 4*log(x) + rnorm(150)
plot(x,y,pch = "+", col = "blue")
abline(lm(x ~ y))
abline(lm(y ~ x))
summary(mod1)
x <- rnorm(150, 15, 2)
y <- 5 + 4*log(x) + rnorm(150)
plot(x,y,pch = "+", col = "blue")
mod1 <- lm(y ~ x)
summary(mod1)
abline(lm(y ~ x))
plot(x,y,pch = "+", col = "blue")
mod1 <- lm(y ~ x)
summary(mod1)
mod2 <- lm(y ~ log(x))
summary(log2)
summary(mod2)
plot(log(x),y,pch = "+", col = "blue")
abline(mod2)
abline(mod1)
x <- rnorm(150, 1, 1)
y <- 5 + 4*log(x) + rnorm(150)
x <- rlnorm(150, 1, 1)
y <- 5 + 4*log(x) + rnorm(150)
plot(x,y,pch = "+", col = "blue")
mod1 <- lm(y ~ x)
summary(mod1)
abline(mod1)
mod2 <- lm(y ~ log(x))
summary(mod2)
plot(log(x),y,pch = "+", col = "blue")
abline(mod2)
lines(seq(0,3,.001), predict(mod2, seq(0,3,.001)))
lines(seq(0,3,.001), predict(mod2, newdata = data.frame(seq(0,3,.001)))
lines(seq(0,3,.001), predict(mod2, newdata = data.frame(seq(0,3,.001))) )
lines(seq(0,3,.001), predict(mod2, newdata = data.frame(seq(0,3,.001))) )
lines(seq(0,3,.001), predict(mod2, newdata = data.frame( x =seq(0,3,.001))) )
plot(x,y,pch = "+", col = "blue")
abline(mod1)
lines(seq(0,3,.001), predict(mod2, newdata = data.frame( x =seq(0,3,.001))) )
lines(seq(0,50,.01), predict(mod2, newdata = data.frame( x =seq(0,50,.01))) )
lines(seq(0,50,.01), predict(mod2, newdata = data.frame( x =seq(0,50,.01))), col = "red" )
plot(x,y,pch = "+", col = "blue")
abline(mod1, col = "red")
lines(seq(0,50,.01), predict(mod2, newdata = data.frame( x =seq(0,50,.01))), col = "red" )
x
plot(x,y,pch = "+", col = "blue")
mod1 <- lm(y ~ x)
summary(mod1)
abline(mod1, col = "red")
mod2 <- lm(y ~ log(x))
summary(mod2)
plot(x,y,pch = "+", col = "blue")
lines(seq(0,50,.01), predict(mod2, newdata = data.frame( x =seq(0,50,.01))), col = "red" )
mean(resid(mod1))
mod1 <- lm(y ~ x)
summary(mod1)
abline(mod1, col = "red")
mod2 <- lm(y ~ log(x))
summary(mod2)
plot(x,y,pch = "+", col = "blue")
lines(seq(0,50,.01), predict(mod2, newdata = data.frame( x =seq(0,50,.01))), col = "red" )
x <- rlnorm(150, 1, 1)
y <- 5 + 4*log(x) + rnorm(150) #NOTE: beta = 4, but log(x), not x!
plot(x,y,pch = "+", col = "blue")
mod1 <- lm(y ~ x)
summary(mod1)
abline(mod1, col = "red")
mod2 <- lm(y ~ log(x))
summary(mod2)
plot(x,y,pch = "+", col = "blue")
lines(seq(0,50,.01), predict(mod2, newdata = data.frame( x =seq(0,50,.01))), col = "red" )
cov
library(car)
library(faraway)
library(apsrtable)
data(Duncan)
g <- lm(prestige~education+income,Duncan)
g
cov(Duncan$prestige, Duncan$education)
x0 <- rnorm(1000,0,10)
x1 <- rnorm(1000,0,25)
x2 <- rnorm(1000,0,50)
x3 <- rnorm(1000,0,100)
for(i in 1:45){
Duncan$educationRE.a[i] <- Duncan$education[i]+sample(x0,1)
Duncan$educationRE.b[i] <- Duncan$education[i]+sample(x1,1)
Duncan$educationRE.c[i] <- Duncan$education[i]+sample(x2,1)
Duncan$educationRE.d[i] <- Duncan$education[i]+sample(x3,1)
}
cov(Duncan$prestige, Duncan$educationRE.d)
var(Duncan$educationRE.d)
var(Duncan$education)
x0 <- rnorm(1000,0,10^2)
x1 <- rnorm(1000,0,25^2)
x2 <- rnorm(1000,0,50^2)
x3 <- rnorm(1000,0,100^2)
for(i in 1:45){
Duncan$educationRE.a[i] <- Duncan$education[i]+sample(x0,1)
Duncan$educationRE.b[i] <- Duncan$education[i]+sample(x1,1)
Duncan$educationRE.c[i] <- Duncan$education[i]+sample(x2,1)
Duncan$educationRE.d[i] <- Duncan$education[i]+sample(x3,1)
}
g.a <- lm(prestige~educationRE.a+income,Duncan)
g.b <- lm(prestige~educationRE.b+income,Duncan)
g.c <- lm(prestige~educationRE.c+income,Duncan)
g.d <- lm(prestige~educationRE.d+income,Duncan)
b0<- summary(g)$coef[2,1]
b1 <- summary(g.a)$coef[2,1]
b2 <- summary(g.b)$coef[2,1]
b3 <-summary(g.c)$coef[2,1]
b4 <- summary(g.d)$coef[2,1]
a0<- summary(g)$coef[3,1]
a1 <- summary(g.a)$coef[3,1]
a2 <- summary(g.b)$coef[3,1]
a3 <-summary(g.c)$coef[3,1]
a4 <- summary(g.d)$coef[3,1]
educoefs <- c(b0,b1,b2,b3,b4)
inccoefs <- c(a0,a1,a2,a3,a4)
vars <- c(0,10,25,50,100)
plot(x=vars,y=educoefs, ylim=c(0,1.1), type="o", xlab="Measurement Error Standard Deviations", ylab="Coefficient Values", main="Random Effects' Impact on Coefficients")
lines(x=vars,y=inccoefs, type="o", col="red")
x3
Duncan$education
g <- lm(prestige~income,Duncan)
g
x <- rnorm(100, 10, 2)
x
T <- rbinom(100,1,prob = ifelse( x > 10, .8, .3))
T
Treat <- rbinom(100,1,prob = ifelse( x > 10, .8, .3))
cor(x, Treat)
Treat <- rbinom(100,1,prob = ifelse( x > 10, .9, .3))
cor(x, Treat)
Treat <- rbinom(100,1,prob = ifelse( x > 10, .9, .3))
cor(x, Treat)
Treat <- rbinom(100,1,prob = ifelse( x > 10, .9, .3))
cor(x, Treat)
y <- 5 + 0 * Treat + 4 * x + rnorm(100)
y
summary(lm(y ~ Treat + x ))
x <- rnorm(1000, 10, 2)
Treat <- rbinom(1000,1,prob = ifelse( x > 10, .9, .3))
y <- 5 + 0 * Treat + 4 * x + rnorm(1000)
summary(lm(y ~ Treat + x ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
abline(a = 4.71+0.087, b = 4.016, lwd = 2)
abline(a = 4.71, b = 4.016, lwd = 2, lty = 2)
y <- 5 + 4 * Treat + 4 * x + rnorm(1000)
summary(lm(y ~ Treat + x ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
abline(a = 4.82 + 3.98, b = 4.016, lwd = 2)
abline(a = 4.82, b = 4.016, lwd = 2, lty = 2)
y <- 5 + 4 * Treat + 4 * x + 3 * Treat * x + rnorm(1000)
summary(lm(y ~ Treat * x ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
y <- 5 + 4 * Treat + 4 * x + 10 * Treat * x + rnorm(1000)
summary(lm(y ~ Treat * x ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
y <- 5 + 4 * Treat + 4 * x + rnorm(1000)
summary(lm(y ~ Treat + x ))
summary(lm(y ~ Treat  ))
summary(lm(y ~ Treat + x ))
T <- c(rep(0,50), rep(1,50))
TT <- factor(T, levels=c(0,1), labels=c("Control","Treatment"))
x <- c(rnorm(50,10,5), rnorm(50,20,5))
y <- c(rnorm(100, 10, 10)+.5*x)
cor(T,x)
cor(y,x)
g <- lm(y~TT+x)
summary(g)
gco <- coef(g)
par(mfrow=c(1,1), mar=c(4,4,4,4))
pt <- vector(length=100)
pt <- ifelse(TT=="Treatment", 1, 20)
plot(y=y,x=x, pch=pt, xlab="x", ylab="y", main="Plot of No Treatment Effect")
abline(a=gco[1], b=gco[3], lwd=3)
abline(a=gco[1]+gco[2], b=gco[3])
## 2 b ###
y1 <- c(rnorm(50, x, 10), rnorm(50,x+15,10))
cor(T,x)
cor(y1,x)
g1 <- lm(y1~TT+x)
summary(g1)
g1co <- coef(g1)
plot(y=y1,x=x, pch=pt, xlab="x", ylab="y", main="Plot of Constant Treatment Effect")
abline(a=g1co[1], b=g1co[3])
abline(a=g1co[1]+g1co[2], b=g1co[3])
## 2c ##
xa <- x[1:50]
xb <- x[51:100]
y2 <- c(rnorm(50, x, 5), rnorm(50,5*x,5))
cor(y2,x)
g2 <- lm(y2~T+x)
summary(g2)
g2co <- coef(g2)
plot(y=y2,x=x, pch=pt, xlab="x", ylab="y", main="Plot of Constant Treatment Effect")
abline(a=g2co[1], b=g2co[3])
abline(a=g2co[1]+g2co[2], b=g2co[3])
## 2d ##
y3 <- numeric(100)
for(i in 1:100){
y3[i]<-ifelse(i>=51, y[i]-x,y[i])
}
cor(T,x)
cor(y3,x)
g3.a <- lm(y3~T)
summary(g3.a)
g3 <- lm(y3~T+x)
summary(g3)
g2co <- coef(g2)
plot(y=y3,x=x3, pch=pt, xlab="x", ylab="y", main="Plot of Constant Treatment Effect")
abline(a=g2co[1], b=g2co[3])
abline(a=g2co[1]+g2co[2], b=g2co[3])
## 2e ##
y4 <- c(rnorm(50,y,5), rexp(50,10))
x4 <- c(rnorm(50,y,5), rexp(50, 10))
g.4.a<- lm(y4~T+x4)
summary(g.4.a)
plot(y=y,x=x4, pch=pt, xlab="x", ylab="y", main="Plot of Constant Treatment Effect")
x4 <- c((rnorm(50,10,5)^2), (rnorm(50,20,5))^2)
lm(y1~TT+x4)
y4 <- 5+10*T+.5*x+2*T*x
g.5<- lm(y4~TT+x)
summary(g.5)
g.5.a <- lm(y4~TT+x+TT*x)
summary(g.5.a)
cor(x,y4)
cor(x,T)
y <- 5 + 4 * Treat + 4 * x + 10 * Treat * x + rnorm(1000)
summary(lm(y ~ Treat * x ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
abline(a = 4.82 + 3.98, b = 4.016, lwd = 2)
y <- 5 + 4 * Treat + 4 * x + 10 * Treat * x + rnorm(1000)
summary(lm(y ~ Treat * x ))
x <- rnorm(1000, 10, 2)
Treat <- rbinom(1000,1,prob = ifelse( x > 10, .9, .3))
y <- 5 + 4 * Treat + 4 * x + 10 * Treat * x + rnorm(1000)
summary(lm(y ~ Treat * x ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
y <- 5 + 4 * Treat + 4 * exp(x) + 10 * Treat * exp(x) + rnorm(1000)
summary(lm(y ~ Treat * x ))
summary(lm(y ~ Treat * exp(x) ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
y <- 5 + 4 * Treat + 4 * log(x) + 10 * Treat * log(x) + rnorm(1000)
summary(lm(y ~ Treat * exp(x) ))
summary(lm(y ~ Treat * log(x) ))
plot( x = x, y = y, col = ifelse(Treat == 1, "blue", "red"))
install.packages(c("arm", "boot", "codetools", "Formula", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "numDeriv", "plyr", "R2jags", "Rcpp", "Rglpk", "rjags", "texreg"))
source('~/Documents/WashU 2nd Year/Causal Inference/Research Project/Code/synthTOOLS/Development File.R', echo=TRUE)
